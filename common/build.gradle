plugins {
    id 'java'
    id 'multiloader-common'
    id 'net.neoforged.moddev'
    id "me.champeau.jmh" version "0.7.3"
}

neoForge {
    neoFormVersion = neo_form_version
    // Automatically enable AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

dependencies {
    compileOnly("org.spongepowered:mixin:0.8.7")
    compileOnly("org.ow2.asm:asm-tree:9.6")
    // fabric and neoforge both bundle mixinextras, so it is safe to use it in common
    compileOnly("io.github.llamalad7:mixinextras-common:0.5.0")
    annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0")

    compileOnly("org.yaml:snakeyaml:2.4")
    implementation("one.pkg:sewlia-config:${config_api_version}") {
        exclude group: 'org.slf4j'
    }

    implementation("one.pkg.velocity_rc:velocity-native:3.4.0-SNAPSHOT") {
        exclude group: 'io.netty'
    }

    jmh("io.netty:netty-buffer:4.1.118.Final")
    jmh("io.netty:netty-common:4.1.118.Final")
    jmh("io.netty:netty-codec:4.1.118.Final")
    jmh("io.netty:netty-handler:4.1.118.Final")
    jmh("io.netty:netty-resolver:4.1.118.Final")
    jmh("one.pkg.velocity_rc:velocity-native:3.4.0-SNAPSHOT") {
        exclude group: 'io.netty'
    }
    jmh("org.openjdk.jmh:jmh-core:1.37")
    jmh("org.openjdk.jmh:jmh-generator-annprocess:1.37")
    jmh("org.openjdk.jmh:jmh-generator-bytecode:1.37")
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

jmh {
    resultFormat = "JSON"
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}